name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '42 10 * * *'
  push:
    branches: [ master ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          
      - name: Deploy to Azure Container Instances
        uses: Azure/aci-deploy@v1
        with:
          # Name of the Resource Group in which the Container Instance will be created
          resource-group: KG3InfoBot
          # Number of CPU Cores Required
          cpu: 0.25
          # Specify the fully qualified container image name. For example, "myregistry.azurecr.io/nginx:latest" or "python:3.7.2-alpine/"
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest 
          # Location where the Container will be deployed
          location: westeurope          
          # Required Memory of the Containers in GB, accurate to one decimal place
          memory: 0.5 # optional, default is 1.5
          # Name of the Container Group Instance
          name: kg3-info-bot
          # The OS type of the Containers. Accepted Values are  { Linux, Windows }
          os-type: Linux # optional, default is Linux
          # The container image registry login server
          # registry-login-server: # optional, default is 
          # Username to log in Container Image Registry Server
          # registry-username: # optional, default is 
          # Password to log in Container Image Registry Server
          # registry-password: # optional, default is 
          # Restart Policy for the container(s). Accepted Values are { Always, OnFailure, Never }          
          # List of secure environment variables for the container. Space seperated values in "key=value" format
          secure-environment-variables: "API-KEY=${{ secrets.API_KEY }}"# optional, default is 
      
